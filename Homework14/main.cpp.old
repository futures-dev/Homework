/*Kolos Maria
BSE 141-1
Project #14 SpellChecker*/

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cstdlib>
#include <cctype>

#include "dictionary.h"

using namespace std;

void lower(string &s);

string stripPunct(const string &s);

void checkSpelling(ifstream &in, Dictionary &dict);

int main(int argc, char *argv[]) {

    // Output usage message if improper command line args were given.
    /*if (argc != 3)
    {
    cerr << "Usage: " << argv[0] << " wordlist_filename input_file\n";
    return EXIT_FAILURE;
    }
    */
    ifstream inf("test.txt");
    /*if (!inf)
    {
    cerr << "Could not open " << "text.txt" << "\n";
    return EXIT_FAILURE;
    }
    */
    // Read dictionary, but let user know what we are working on.
    cout << "Loading dictionary, this may take awhile...\n";

    Dictionary d("wordlist.txt");
    cout << "loaded";
    checkSpelling(inf, d);

    inf.close();
    system("pause");
    return EXIT_SUCCESS;
}

void checkSpelling(ifstream &in, Dictionary &dict) {

    int line_number = 0;

    while (in) {
        line_number++;

        string line;
        getline(in, line);

        stringstream ss(stringstream::in | stringstream::out);
        ss << line;

        string word;
        while (ss >> word) {
            /*clearing up*/
            word = stripPunct(word);
            lower(word);

            /*found a misspelled word*/
            if (!dict.search(word)) {
                cout << "line " << line_number << ": '" << word << "'\n";
                /*considering suggestions*/
                dict.transpose(word);
                dict.removeLetter(word);
                dict.replacement(word);
                dict.inserting(word);

                /*here they are*/
                for (std::list<string>::iterator it = dict.suggestions.begin(); it != dict.suggestions.end(); ++it)
                    std::cout << "\t" << *it << endl;
                dict.suggestions.clear();

            }

        }

    }

}

void lower(string &s) {
    // Ensures that a word is lowercase
    for (int i = 0; i < s.length(); i++) {
        s[i] = tolower(s[i]);
    }
}

string stripPunct(const string &s) {
    // Remove any single trailing
    // punctuation character from a word.
    if (ispunct(s[s.length() - 1])) {
        return s.substr(0, s.length() - 1);
    }
    else {
        return s;
    }
}
